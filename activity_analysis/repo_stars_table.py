"""Generate LaTeX table of repository star statistics by agent."""
import polars as pl
import datetime
from pathlib import Path
from spoiler.analysis.load_hf_data_polars import TableNames, load_lazy_table_for_all_agents
from spoiler.util.texrendering import get_git_info


cur_path = Path(__file__).parent
root_path = cur_path.parent.parent
plots_path = root_path / "plots" / "repo_analysis"

# Create plots directory if it doesn't exist
plots_path.mkdir(parents=True, exist_ok=True)


def sort_agents_human_first(df: pl.DataFrame) -> pl.DataFrame:
    """Sort a dataframe so Human comes first, then others alphabetically."""
    human_row = df.filter(pl.col("agent") == "Human")
    other_rows = df.filter(pl.col("agent") != "Human").sort("agent")
    return pl.concat([human_row, other_rows])


def load_pr_repo_data():
    """Load and join PR and Repository data."""
    print("Loading PR data...")
    prs_lazy = load_lazy_table_for_all_agents(TableNames.PULL_REQUESTS)
    
    print("Loading Repository data...")
    repos_lazy = load_lazy_table_for_all_agents(TableNames.REPOSITORIES)
    
    # Filter repos to only base repositories (the target repo of the PR)
    print("Filtering to BASE repositories...")
    base_repos = repos_lazy.filter(pl.col("role") == "BASE")
    
    # Join PRs with their base repositories
    print("Joining PRs with repositories...")
    pr_repo_data = prs_lazy.join(
        base_repos,
        left_on=["id", "agent"],
        right_on=["pr_id", "agent"],
        how="left"
    )
    
    # Filter to PRs that have star data (not null)
    print("Filtering to PRs with valid star counts...")
    pr_repo_data = pr_repo_data.filter(pl.col("stargazer_count").is_not_null())
    
    print("Collecting data...")
    return pr_repo_data.collect()


def compute_star_statistics(df: pl.DataFrame) -> pl.DataFrame:
    """Compute star statistics for each agent."""
    
    stats = df.group_by("agent").agg([
        pl.len().alias("n_prs"),
        # Percentage with 0 stars
        (pl.col("stargazer_count") == 0).mean().mul(100).alias("pct_zero"),
        # Percentage with >= 1 star
        (pl.col("stargazer_count") >= 1).mean().mul(100).alias("pct_gte_1"),
        # Percentage with >= 10 stars
        (pl.col("stargazer_count") >= 10).mean().mul(100).alias("pct_gte_10"),
        # Percentage with >= 100 stars
        (pl.col("stargazer_count") >= 100).mean().mul(100).alias("pct_gte_100"),
        # Median stars (including zeros)
        pl.col("stargazer_count").median().alias("median_stars"),
        # Median stars among non-zero
        pl.col("stargazer_count").filter(pl.col("stargazer_count") > 0).median().alias("median_nonzero"),
    ])
    
    # Sort with Human last (to match your table style with Human separated by hdashline)
    # Actually, let me put agents first, then Human with separator
    ai_agents = stats.filter(pl.col("agent") != "Human").sort("agent")
    human = stats.filter(pl.col("agent") == "Human")
    
    return pl.concat([ai_agents, human])


def format_number(n: float, decimals: int = 0) -> str:
    """Format number with thousands separator."""
    if decimals == 0:
        return f"{int(n):,}"
    else:
        return f"{n:,.{decimals}f}"


def format_percentage(pct: float, decimals: int = 1) -> str:
    """Format percentage."""
    return f"{pct:.{decimals}f}\\%"


def generate_latex_table(stats: pl.DataFrame) -> str:
    """Generate LaTeX table code."""
    
    lines = []
    
    # Add generation info comment
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    git_sha = get_git_info()
    lines.append(f"% Generated by spoiler/analysis/repo_stars_table.py")
    lines.append(f"% {timestamp} git commit {git_sha}")
    lines.append("")
    
    lines.append(r"\begin{table}[h]")
    lines.append(r"\centering")
    
    # Table structure - adjust column widths as needed
    lines.append(r"\begin{tabular}{@{}l r r r r r@{}}")
    lines.append(r"\hline")
    
    # Two-row header with grouped columns
    # First row: PR Author (empty) and grouped "PR's Repo Star Count" spanning 5 columns
    header_row1 = r"\textbf{PR Author} & \multicolumn{5}{c}{\textbf{PR's Repo Star Count}} \\"
    lines.append(header_row1)
    lines.append(r"\cmidrule(l){2-6}")
    
    # Second row: the actual column headers
    header_row2 = (r" & \textbf{\%=0} & "
                  r"\textbf{\%$\geq$10} & \textbf{\%$\geq$100} & "
                  r"\textbf{Median} & \textbf{Med(if$>$0)} \\")
    lines.append(header_row2)
    lines.append(r"\hline")
    
    # Data rows
    stats_dicts = stats.to_dicts()
    for i, row in enumerate(stats_dicts):
        # Add hdashline before Human row
        if row['agent'] == 'Human':
            lines.append(r"\hdashline")
        
        # Use agent name as-is
        agent_name = row['agent']
        
        # Format values
        pct_zero = format_percentage(row['pct_zero'])
        pct_gte_10 = format_percentage(row['pct_gte_10'])
        pct_gte_100 = format_percentage(row['pct_gte_100'])
        median = format_number(row['median_stars'])
        median_nonzero = format_number(row['median_nonzero']) if row['median_nonzero'] is not None else "---"
        
        row_str = f"{agent_name} & {pct_zero} & {pct_gte_10} & {pct_gte_100} & {median} & {median_nonzero} \\\\"
        lines.append(row_str)
    
    lines.append(r"\hline")
    lines.append(r"\end{tabular}")
    lines.append(r"\caption{Each PR is associated with a repo with a given number of stars. This table shows some of the distribution of the star count of PRs. Most PRs are in repos with only 0 stars. Human PRs are in more highly starred repos.}")
    lines.append(r"\label{tab:repo_stars}")
    lines.append(r"\end{table}")
    
    return "\n".join(lines)


def print_summary_stats(stats: pl.DataFrame):
    """Print human-readable summary."""
    print("\n" + "="*80)
    print("REPOSITORY STAR STATISTICS BY AGENT")
    print("="*80)
    print()
    
    # Print formatted table
    print(f"{'Agent':<20} {'#PRs':>8} {'%=0':>8} {'%≥10':>8} {'%≥100':>8} {'Median':>8} {'Med(>0)':>8}")
    print("-" * 80)
    
    for row in stats.to_dicts():
        agent = row['agent']
        n_prs = f"{row['n_prs']:,}"
        pct_zero = f"{row['pct_zero']:.1f}%"
        pct_gte_10 = f"{row['pct_gte_10']:.1f}%"
        pct_gte_100 = f"{row['pct_gte_100']:.1f}%"
        median = f"{int(row['median_stars']):,}"
        median_nz = f"{int(row['median_nonzero']):,}" if row['median_nonzero'] is not None else "---"
        
        if agent == 'Human':
            print("-" * 80)
        
        print(f"{agent:<20} {n_prs:>8} {pct_zero:>8} {pct_gte_10:>8} {pct_gte_100:>8} {median:>8} {median_nz:>8}")
    
    print()


def main():
    """Main entry point."""
    print("="*80)
    print("REPOSITORY STARS TABLE GENERATION")
    print("="*80)
    
    # Load data
    df = load_pr_repo_data()
    print(f"\nLoaded {len(df):,} PRs with repository information")
    
    # Compute statistics
    print("\nComputing star statistics...")
    stats = compute_star_statistics(df)
    
    # Print summary
    print_summary_stats(stats)
    
    # Generate LaTeX table
    print("\nGenerating LaTeX table...")
    latex_table = generate_latex_table(stats)
    
    # Save to file
    output_file = plots_path / "repo_stars_table.tex"
    with open(output_file, 'w') as f:
        f.write(latex_table)
    
    print(f"\n✓ LaTeX table saved to: {output_file}")
    
    # Also print to console for easy copy-paste
    print("\n" + "="*80)
    print("LATEX TABLE (ready to copy)")
    print("="*80)
    print(latex_table)
    print("="*80)


if __name__ == "__main__":
    main()

