from spoiler.util.texrendering import dict_to_latex_vars_cmds, get_git_info
import datetime
from pathlib import Path
from scipy import stats
from spoiler.analysis.load_hf_data_polars import TableNames, load_lazy_table_for_all_agents, AgentNames
import polars as pl


cur_path = Path(__file__).parent
root_path = cur_path.parent.parent
plots_path = root_path / "plots"


def prepare_pr_data(df: pl.LazyFrame) -> pl.DataFrame:
    """Prepare PR data by adding computed columns."""
    return df.with_columns([
        # Impute null additions/deletions with 0 (missing data from GitHub API)
        pl.col("additions").fill_null(0),
        pl.col("deletions").fill_null(0),
        
        # Total changes
        (pl.col("additions") + pl.col("deletions")).alias("total_changes"),
        
        # Parse datetime columns
        pl.col("created_at").str.to_datetime(),
        pl.col("merged_at").str.to_datetime(),
        
        # Merge status
        pl.col("merged_at").is_not_null().alias("is_merged"),
        
        # Time to merge (in hours) - only for merged PRs
        ((pl.col("merged_at").str.to_datetime() - pl.col("created_at").str.to_datetime())
            .dt.total_seconds() / 3600.0)
            .alias("time_to_merge_hours"),
    ]).collect()


def get_overview_vars():
    """Get overview variables for LaTeX rendering."""
    # Load PR data
    df_lazy = load_lazy_table_for_all_agents(TableNames.PULL_REQUESTS)
    df = prepare_pr_data(df_lazy)
    
    # Calculate median total changes for each agent
    code_stats = df.group_by("agent").agg([
        pl.col("total_changes").median().alias("median_total_changes"),
    ])
    
    # Calculate median time to merge for merged PRs only
    merged_df = df.filter(pl.col("is_merged"))
    time_stats = merged_df.group_by("agent").agg([
        pl.col("time_to_merge_hours").median().alias("median_time_to_merge_hours"),
        (pl.col("time_to_merge_hours") * 60).median().alias("median_time_to_merge_minutes"),
        (pl.col("time_to_merge_hours") * 3600).median().alias("median_time_to_merge_seconds"),
        pl.len().alias("total_merged"),
        (pl.col("time_to_merge_hours") < (10 / 60)).sum().alias("merged_under_10min"),
    ])
    
    time_stats = time_stats.with_columns([
        (pl.col("merged_under_10min") / pl.col("total_merged") * 100).alias("pct_merged_under_10min"),
    ])
    
    # Create a dictionary with variables for each agent
    vars_dict = {}
    
    # Add median total changes
    for row in code_stats.iter_rows(named=True):
        agent = row['agent']
        median_changes = row['median_total_changes']
        var_name = f"{agent.lower()}_median_total_changes"
        vars_dict[var_name] = f"{median_changes:.0f}"
    
    # Add time to merge stats
    for row in time_stats.iter_rows(named=True):
        agent = row['agent']
        median_time_hours = row['median_time_to_merge_hours']
        median_time_minutes = row['median_time_to_merge_minutes']
        median_time_seconds = row['median_time_to_merge_seconds']
        pct_under_10min = row['pct_merged_under_10min']
        
        # Time in hours
        var_name = f"{agent.lower()}_median_time_to_merge_hours"
        vars_dict[var_name] = f"{median_time_hours:.1f}"
        
        # Time in minutes
        var_name = f"{agent.lower()}_median_time_to_merge_minutes"
        vars_dict[var_name] = f"{median_time_minutes:.1f}"
        
        # Time in seconds (rounded to nearest second)
        var_name = f"{agent.lower()}_median_time_to_merge_seconds"
        vars_dict[var_name] = f"{median_time_seconds:.0f}"
        
        # Percentage under 10 minutes
        var_name = f"{agent.lower()}_pct_merged_under_ten_min"
        vars_dict[var_name] = f"{pct_under_10min:.1f}%"
    
    return vars_dict


def main():
    vars = get_overview_vars()
    latex_vars = dict_to_latex_vars_cmds(vars)
    print(latex_vars)
    save_path = plots_path / "gen_vars.tex"
    latex_vars = (
f"""
% Generated by spoiler/analysis/pape_vars.py
% {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")} git commit {get_git_info()}
{latex_vars}
"""
    )
    save_path.write_text(latex_vars)
    print(f"Variables written to {save_path}")


if __name__ == "__main__":
    main()